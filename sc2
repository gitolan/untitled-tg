local Players = game:GetService("Players")
local player = Players.LocalPlayer
local tweenService = game:GetService("TweenService")
local runService = game:GetService("RunService")

-- Function to create a styled button
local function createStyledButton(parent, text, position)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(1, 0, 0.2, 0)
    button.Position = position
    button.Text = text
    button.TextScaled = true
    button.Font = Enum.Font.SourceSansSemibold
    button.TextColor3 = Color3.new(1, 1, 1)
    button.BackgroundColor3 = Color3.new(0.5, 0.5, 0.5)
    button.BackgroundTransparency = 0.5

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0.25, 0)
    corner.Parent = button

    local blurLayer = Instance.new("Frame")
    blurLayer.Size = UDim2.new(1, 0, 1, 0)
    blurLayer.BackgroundColor3 = Color3.new(0.5, 0.5, 0.5)
    blurLayer.BackgroundTransparency = 0.8
    blurLayer.ZIndex = button.ZIndex - 1
    blurLayer.Parent = button

    local cornerBlur = Instance.new("UICorner")
    cornerBlur.CornerRadius = UDim.new(0.25, 0)
    cornerBlur.Parent = blurLayer

    button.Parent = parent

    return button
end

-- Function to animate a button
local function animateButton(button)
    local goal = {BackgroundColor3 = Color3.new(0.3, 0.3, 0.3)}
    local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, true)
    local tween = tweenService:Create(button, tweenInfo, goal)
    button.MouseButton1Click:Connect(function()
        tween:Play()
    end)
end

-- Create the GUI
local screenGui = Instance.new("ScreenGui")
screenGui.ResetOnSpawn = false
screenGui.Parent = player:WaitForChild("PlayerGui")

local frameZIndex = 1000
local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 150, 0, 240) -- Adjusted height to accommodate new buttons
frame.Position = UDim2.new(0, 10, 0, 10)
frame.BackgroundTransparency = 1
frame.Parent = screenGui

local buttonSpacing = 0.25
local teleportButton = createStyledButton(frame, "Teleport / Back", UDim2.new(0, 0, 0 * buttonSpacing, 0))
local teleportAndCreateBlockButton = createStyledButton(frame, "Teleport & Create Blocks", UDim2.new(0, 0, 1 * buttonSpacing, 0))
local farmCoinButton = createStyledButton(frame, "Start Farm Coin", UDim2.new(0, 0, 2 * buttonSpacing, 0))
local hitboxButton = createStyledButton(frame, "Start Hitbox", UDim2.new(0, 0, 3 * buttonSpacing, 0))

animateButton(teleportButton)
animateButton(teleportAndCreateBlockButton)
animateButton(farmCoinButton)
animateButton(hitboxButton)

-- Variables for teleport functionality
local initialPosition
local isTeleported = false
local lastTeleportedPlayer
local debounce = false

-- Function to teleport to a player
local function teleportToPlayer(targetPlayer)
    if not player.Character or not player.Character.PrimaryPart then
        return
    end

    if not targetPlayer.Character or not targetPlayer.Character.PrimaryPart then
        return
    end

    initialPosition = player.Character.PrimaryPart.Position
    player.Character:SetPrimaryPartCFrame(targetPlayer.Character.PrimaryPart.CFrame)
    isTeleported = true
    teleportButton.Text = "Return to Starting Position"
    lastTeleportedPlayer = targetPlayer
end

-- Function to find the next eligible player
local function findNextPlayer()
    local playerRole = player:FindFirstChild("PlayerRole") and player.PlayerRole.Value or nil
    local eligiblePlayers = {}

    for _, otherPlayer in ipairs(Players:GetPlayers()) do
        if otherPlayer ~= player and otherPlayer ~= lastTeleportedPlayer and otherPlayer:FindFirstChild("PlayerRole") then
            local otherPlayerRole = otherPlayer.PlayerRole.Value
            if otherPlayerRole ~= "Dead" and 
              ((playerRole == "Runner" and otherPlayerRole == "Frozen") or 
              (otherPlayerRole == "Crown" or otherPlayerRole == "Runner" or otherPlayerRole == "Survivor" or otherPlayerRole == "Juggernaut" or otherPlayerRole == "B/FreezeRunner" or otherPlayerRole == "B/Crown" or otherPlayerRole == "Alone" or otherPlayerRole == "Frozen") or
              (playerRole == "RedTeam" and otherPlayerRole == "BlueTeam") or 
              (playerRole == "BlueTeam" and otherPlayerRole == "RedTeam")) then
                table.insert(eligiblePlayers, otherPlayer)
            end
        end
    end

    if #eligiblePlayers > 0 then
        local randomIndex = math.random(1, #eligiblePlayers)
        return eligiblePlayers[randomIndex]
    else
        local fallbackPlayers = {}
        for _, otherPlayer in ipairs(Players:GetPlayers()) do
            if otherPlayer ~= player and otherPlayer:FindFirstChild("PlayerRole") then
                local otherPlayerRole = otherPlayer.PlayerRole.Value
                if otherPlayerRole ~= "Dead" and otherPlayerRole ~= playerRole then
                    table.insert(fallbackPlayers, otherPlayer)
                end
            end
        end
        if #fallbackPlayers > 0 then
            local randomIndex = math.random(1, #fallbackPlayers)
            return fallbackPlayers[randomIndex]
        end
    end

    return nil
end

-- Toggle teleport functionality
local function toggleTeleport()
    if debounce then return end
    debounce = true

    if isTeleported then
        if initialPosition then
            player.Character:SetPrimaryPartCFrame(CFrame.new(initialPosition))
            isTeleported = false
            teleportButton.Text = "Teleport / Back"
        end
    else
        local targetPlayer = findNextPlayer()
        if targetPlayer then
            teleportToPlayer(targetPlayer)
        else
            print("No eligible players to teleport to.")
            teleportButton.Text = "No eligible players"
            wait(2)  -- Delay to show message
            teleportButton.Text = "Teleport / Back"
        end
    end

    debounce = false
end

-- Teleport and create a block
local function teleportAndCreateBlock()
    initialPosition = player.Character.PrimaryPart.Position
    player.Character:SetPrimaryPartCFrame(CFrame.new(0, 400, 0))
    isTeleported = true
    teleportButton.Text = "Return to Starting Position"

    local block = Instance.new("Part")
    block.Size = Vector3.new(100, 3, 100)
    block.Position = Vector3.new(0, 397, 0)
    block.Anchored = true
    block.Material = Enum.Material.Plastic
    block.Color = Color3.new(1, 1, 1)
    block.Transparency = 0.1
    block.Parent = workspace
end

-- Toggle farm coin functionality
local farmCoinActive = false
local farmCoinLoop

local function toggleFarmCoin()
    farmCoinActive = not farmCoinActive
    if farmCoinActive then
        farmCoinButton.Text = "Stop Farm Coin"
        farmCoinLoop = coroutine.create(function()
            local targetMeshId = "rbxassetid://8483581926"
            local function findTargetPart()
                for _, obj in pairs(workspace:GetDescendants()) do
                    if obj:IsA("MeshPart") and obj.MeshId == targetMeshId then
                        return obj
                    end
                end
                return nil
            end

            while farmCoinActive do
                local targetPart = findTargetPart()
                if targetPart then
                    player.Character:SetPrimaryPartCFrame(targetPart.CFrame)
                end
                wait(0.1)
            end
        end)
        coroutine.resume(farmCoinLoop)
    else
        farmCoinButton.Text = "Start Farm Coin"
    end
end

-- Toggle hitbox functionality
local hitboxActive = false
local hitboxLoop

local function toggleHitbox()
    hitboxActive = not hitboxActive
    if hitboxActive then
        hitboxButton.Text = "Stop Hitbox"
        hitboxLoop = runService.Stepped:Connect(function()
            if hitboxActive then
                for _, i in next, Players:GetPlayers() do
                    if i ~= player then
                        local root = i.Character and i.Character:FindFirstChild("HumanoidRootPart")
                        if root then
                            root.Size = Vector3.new(7, 7, 6)
                            root.Transparency = 0.5
                        end
                    end
                end
            end
        end)
    else
        hitboxButton.Text = "Start Hitbox"
        if hitboxLoop then
            hitboxLoop:Disconnect()
        end
    end
end

-- Connect buttons to their respective functions
teleportButton.MouseButton1Click:Connect(toggleTeleport)
teleportAndCreateBlockButton.MouseButton1Click:Connect(teleportAndCreateBlock)
farmCoinButton.MouseButton1Click:Connect(toggleFarmCoin)
hitboxButton.MouseButton1Click:Connect(toggleHitbox)
